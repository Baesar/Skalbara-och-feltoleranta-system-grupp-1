These are the following points that need to be achieved 

Description: A Therapy Schedule booking website that has patients, members ,staff and Admins . Anyone can come in read about the website and us. They can also see public events available  . Once logged in the user can pull information about them such as their schedule with therapists. If they are staff they can see their booked therapy sessions with others as well as search for individuals and see their schedule . Admins are able to change things such as login information, add logins and remove people . Staff are the only ones that can make events happen and can send requests to admin.





Assignment 2 : 

* Working Interface with the Db  (Julius and Ash) 

* Logging functions (Julius)
- after logging in go to main page
* Show individuals their schedule (Rama) //

* Show staff other individuals schedule and be able to edit, add and remove (Rama)
-staff should be able to pick a person and see their schedule 
-both staff and individuals should be able to add, remove and edit their details
-schedule should show when times are unavaible for people, mark time as red.

* small staff page where they send a small msg to admins for help adding people, edit or remove people . THIS IS MERELY A MESSAGE . and who its about .(could be bubble too)

* Page for anyone to see public events . (Darina)
-make new page for events

* Staff ability to add/edit events (removed automatically after date passed)(Rama)

* Admin ability to Add, edit and remove individual information (Ash)

* Admin requests from staff (Ash)

* Unified CSS file for everyone to use (Darina and Ash)

* Support on all the above (Ash and Julius)

-------------------------------------------
* Setup the structure of your project according to MVC model.
* Design, determine, and develop the skeleton of your web application.
* Create a MongoDB database based on the Model Data that you designed and defined in Assignment 1!
Preferably, provide a small program for initialising the database, for example initDB.js.
* Build the web server and develop the API endpoints responsible for the server-side processes and operations, e.g. adding user, listing users.
* The web server (and the APIs) should use the database.
Change the front end (developed in Assignment 1) so that it calls REST APIs provided by the web server.
Preferably, use AxiosLinks to an external site., rather than the built-in fetch() method, to fetch the models from the web server. 
 

Deliverable
* The deliverable project should available in a GitHub repository shared with "mtaromi" and "rudymatela".
* The entire application (everything in your project directory). Please clean up your project by properly setting up a .gitignore file, as described in the instructions. In particular, the node_modules/. Remember to ".gitignore" your compiled/ directory as well.
* A brief README providing instructions to build, run, and use your application.
Your group may choose to have the project private or public if you so prefer.
 

Criteria
* The application should provide the required functionalities. Please check the project description once again!
* Your problem solutions should have proper MVC decomposition.
* Your code and components must be clean and readable.
* Your code should contains documentation comments. 
* Remember to run ESLint before submitting. ESLint should raise no errors.
* Although you don't need to spend a lot of time on the appearance of the app, your app must be at least "reasonably nice" in appearance and convenience. The information layout should be clean.

______________________________________________________________

Key Requirements

* Functionality and Features: Implement 5-10 features, by sending, receiving, and displaying data, calling functions on the server and doing something!
* Entity/Object:  Contains 2-3 entities/objects
* User Interface: Use both simple and complex UI elements.
* User Roles: Implement different user roles (e.g., administrator, customer) with corresponding permissions.
* User Registration and Authentication: Users can create accounts, log in, and manage their profiles securely.
* Notification System: Send automated notifications to users (client-side) on some events.
* Responsive UI: Ensure a user-friendly experience across various devices and screen sizes using React.
* Data Persistence: Store data efficiently in a MongoDB database for future reference.
* Deployment: Deployable on a web server with a simple command or the press of a button.
* [Optional] Security: Implement security measures to protect user data and prevent unauthorised access.
 

General Criteria

* MERN Stack Implementation: Proper utilisation of the MongoDB, Express.js, React, and Node.js technologies. 
* MVC: Proper use of the model, view, controller pattern described in class: proper MVC decomposition and follow the style guidelines discussed in lectures. Note that you should not directly manipulate the DOM in your code. 
* Code Quality: Well-structured, documented, and maintainable code in both the front-end and back-end. In addition, your code and templates must be clean and readable. Remember to run ESLint before submitting. ESLint should raise no errors.
* Functionality: The application's ability to perform the specified tasks accurately.
* User Interface: An intuitive and responsive user interface created using React for event scheduling and management. Your app must be at least "reasonably nice" in appearance and convenience.
* Testing and Debugging: Conduct thorough testing and debugging to ensure a robust and error-free application. 
* Project Documentation: Detailed project documentation, including design documents, database schemas, and user manuals.

_____________________________________________________________
_____________________________________________________________


Appendix 
Schemas we use .

[Users]
[Events]
[Bookings]
[requests]



